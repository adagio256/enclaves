/// <reference types="node" />
/// <reference types="node" />
import { EventEmitter } from 'events';
export type Callback = () => void;
export declare class VsockServer extends EventEmitter {
    listening: boolean;
    private closed;
    private readonly socket;
    constructor();
    close(): void;
    listen(port: number): void;
    private readonly onError;
    private readonly onConnection;
}
export declare class VsockSocket extends EventEmitter {
    destroyed: boolean;
    connecting: boolean;
    private readonly socket;
    private connectCallback?;
    private shutdownCallback?;
    private isShutdown;
    private isEnd;
    constructor(fd?: number);
    connect(cid: number, port: number, connectCallback?: Callback): void;
    writeSync(buf: Buffer): void;
    writeTextSync(data: string): void;
    end(callback?: Callback): void;
    destroy(): void;
    private checkDestroyed;
    private tryClose;
    private readonly onData;
    private readonly onError;
    private readonly onEnd;
    private readonly onShutdown;
    private readonly onConnect;
}
